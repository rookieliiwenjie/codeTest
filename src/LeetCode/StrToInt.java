package LeetCode;


/**
 * @Author: wenjie.li
 * @Date: 2023/4/25 11:13 下午
 * @Description:
 * 写一个函数 StrToInt，实现把字符串转换成整数这个功能。不能使用 atoi 或者其他类似的库函数。
 *
 *
 *
 * 首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。
 *
 * 当我们寻找到的第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字组合起来，作为该整数的正负号；假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。
 *
 * 该字符串除了有效的整数部分之后也可能会存在多余的字符，这些字符可以被忽略，它们对于函数不应该造成影响。
 *
 * 注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换。
 *
 * 在任何情况下，若函数不能进行有效的转换时，请返回 0。
 *
 * 说明：
 *
 * 假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231,  231 − 1]。如果数值超过这个范围，请返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。
 */
public class StrToInt {
    public static void main(String[] args) {
       String s = "109034,109030,108920,108930,108990,109070,109080,108840,108860,108870,108890,108910,108970,108980,109000,108932,109082,108882,108892,109083,108893,240521,116551,108940,108900,108851,356201,356521,237201,364681,108847,15541,108858,108857,108859,108881,108879,108880,108902,106054,106231,108467,108468,108469,12672,108466,15556,22921,108948,108059,108809,108808,108923,108924,108934,108834,108905,108925,108906,108914,108916,108921,108922,108926,108927,108928,108929,108931,108933,108935,108943,109023,108941,108917,108945,109024,108907,108909,108911,108913,108918,108919,108936,108937,108938,108939,108942,108984,108985,109021,109022,109025,109026,109028,109029,109031,109032,109063,109064,108944,109027,109033,109062,109065,109067,109068,109069,109084,109073,109074,109071,109072,109075,109076,109078,109079,109081,109085,109086,109087,109088,109093,108957,108849,227641,109094,12671,855161,200261,109077,108838,108839,108841,108965,108966,109006,108831,108977,108987,109003,108863,108997,108864,108999,108908,108915,108968,109015,108979,108982,108862,108998,108996,109001,109002,108972,108886,108873,108963,108875,108884,108866,108867,108868,108869,108872,108876,108877,108878,108883,108888,108889,108947,108959,108961,108962,108871,108885,108897,236721,108894,108895,108896,108898,108901,108903,236561,236601,236641,236681,236761,251961,253681,860081,902641,200251,912361,912441,109089,864521,864561,923481,12673,661881,108949,867601,915801,199721,909321,108854,108848,108850,108852,108855,108874,108887,108891,108912,108946,108950,108951,108952,108953,108954,108955,108956,108958,108960,108853,108964,108967,108969,108971,108973,108974,108975,108976,108978,108981,108983,108988,108989,108991,108992,108993,108994,108995,109004,109005,109007,109008,109009,109010,109011,109012,109013,109014,109016,109017,109018,109019,109020,109066,249001,917121,917161,917201,917241,917281,917321,917361,917401,917441,917481,917521,917561,917601,917641,917681,917721,917761,917801,917841,917881,917921,917961,918001,918041,918081,918121,918161,918241,917041,918321,918361,918401,918441,918481,918521,918561,918601,918641,918681,918721,918761,918801,918841,918881,918921,918961,919001,919041,919081,919121,919161,919201,919241,919281,919321,919361,919441,919481,919561,919601,919641,919681,919721,919761,919801,919841,919881,919921,919961,920001,920041,920081,920121,920161,920201,920241,920281,920361,920401,920441,920481,920521,920561,920601,920681,920721,917081,918201,918281,919401,919521,920641,920761,920801,920841,920881,920921,920961,921001,108899,923561,108986";
      s = s.replaceAll("\n",",");
        System.out.println("s = " + s);
        System.out.println("sl = " + s.split(",").length );

    }
    public static int strToInt(String str) {
        boolean falg = false;
        int flag =1;
        boolean falgfu = false;
        long x = 0;
        for (int i = 0; i < str.length(); i++) {
            if (str.charAt(i) == ' ') {
                if(falg){
                    break;
                }
            } else if (Character.isDigit(str.charAt(i)) ) {
                falg= true;
                x = x * 10 + (str.charAt(i) - '0') * flag;
                if (flag == -1 && x < Integer.MIN_VALUE) {
                    return  Integer.MIN_VALUE;
                } else if (flag == 1 &&  x > Integer.MAX_VALUE) {
                    return  Integer.MAX_VALUE;
                }
            } else if (Character.isDigit(str.charAt(i)) && falgfu) {
                x = 0;
                break;
            }else if( str.charAt(i) == '-'){
                if(falgfu){
                    break;
                }
                falgfu= true;
                falg = true;
                flag = -1;
            }else if(str.charAt(i) == '+'){
                if(falgfu){
                    break;
                }
                falgfu= true;
                falg = true;
            }  else {
                break;
            }
        }

        return (int)x;

    }

}
