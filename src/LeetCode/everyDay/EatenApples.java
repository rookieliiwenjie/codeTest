package LeetCode.everyDay;

import java.util.*;

public class EatenApples {
    /**
     * 有一棵特殊的苹果树，一连 n 天，每天都可以长出若干个苹果。在第 i 天，
     * 树上会长出 apples[i] 个苹果，这些苹果将会在 days[i] 天后
     * （也就是说，第 i + days[i] 天时）腐烂，变得无法食用。也可能有那么几天，
     * 树上不会长出新的苹果，此时用 apples[i] == 0 且 days[i] == 0 表示。
     * 你打算每天 最多 吃一个苹果来保证营养均衡。注意，你可以在这 n 天之后继续吃苹果。
     * 给你两个长度为 n 的整数数组 days 和 apples ，返回你可以吃掉的苹果的最大数目。
     * 示例 1：
     * 输入：apples = [1,2,3,5,2], days = [3,2,1,4,2]
     * 输出：7
     * 解释：你可以吃掉 7 个苹果：
     * - 第一天，你吃掉第一天长出来的苹果。
     * - 第二天，你吃掉一个第二天长出来的苹果。
     * - 第三天，你吃掉一个第二天长出来的苹果。过了这一天，第三天长出来的苹果就已经腐烂了。
     * - 第四天到第七天，你吃的都是第四天长出来的苹果。
     * apples =
     * [2,1,10]
     * days =
     * [2,10,1]
     */
    public static void main(String[] args) {
        EatenApples eatenApples = new EatenApples();
//        int[] apples = {1, 2, 3, 5, 2};
//        int days[] = {3, 2, 1, 4, 2};
//        int[] apples = {3, 0, 0, 0, 0, 2};
//        int days[] = {3, 0, 0, 0, 0, 2};
        String s = "266863\n" +
                "971821\n" +
                "976924\n" +
                "136034\n" +
                "641926\n" +
                "666828\n" +
                "956294\n" +
                "266725\n" +
                "201274\n" +
                "182525\n" +
                "597119\n" +
                "641370\n" +
                "857888\n" +
                "955369\n" +
                "969420\n" +
                "207902\n" +
                "211658\n" +
                "556681\n" +
                "428424\n" +
                "887801\n" +
                "972696\n" +
                "141313\n" +
                "190005\n" +
                "206852\n" +
                "955214\n" +
                "289005\n" +
                "858206\n" +
                "580420\n" +
                "288983\n" +
                "163764\n" +
                "955387\n" +
                "985884\n" +
                "141320\n" +
                "145230\n" +
                "184637\n" +
                "193316\n" +
                "197951\n" +
                "211632\n" +
                "758285\n" +
                "955221\n" +
                "955200\n" +
                "199407\n" +
                "654546\n" +
                "505834\n" +
                "556688\n" +
                "580604\n" +
                "144917\n" +
                "207598\n" +
                "425432\n" +
                "116279\n" +
                "137073\n" +
                "132231\n" +
                "491197\n" +
                "858205\n" +
                "198314\n" +
                "160691\n" +
                "561805\n" +
                "878297\n" +
                "875175\n" +
                "931712\n" +
                "602454\n" +
                "955206\n" +
                "955215\n" +
                "956292\n" +
                "969102\n" +
                "977578\n" +
                "100980\n" +
                "102106\n" +
                "102107\n" +
                "102109\n" +
                "107537\n" +
                "152087\n" +
                "183127\n" +
                "183598\n" +
                "183576\n" +
                "184550\n" +
                "186802\n" +
                "192205\n" +
                "197737\n" +
                "199408\n" +
                "206823\n" +
                "208494\n" +
                "208502\n" +
                "210015\n" +
                "210227\n" +
                "215608\n" +
                "223911\n" +
                "226095\n" +
                "233868\n" +
                "758598\n" +
                "955216\n" +
                "955212\n" +
                "985004\n" +
                "125582\n" +
                "189057\n" +
                "538006\n" +
                "556690\n" +
                "113373\n" +
                "136998\n" +
                "137294\n" +
                "141947\n" +
                "200690\n" +
                "258293\n" +
                "261015\n" +
                "280245\n" +
                "284964\n" +
                "288985\n" +
                "413137\n" +
                "378963\n" +
                "446968\n" +
                "526946\n" +
                "540201\n" +
                "110511\n" +
                "111307\n" +
                "117719\n" +
                "144841\n" +
                "463770\n" +
                "514836\n" +
                "666244\n" +
                "666247\n" +
                "518960\n" +
                "608203\n" +
                "613092\n" +
                "641928\n" +
                "643292\n" +
                "643698\n" +
                "857941\n" +
                "579984\n" +
                "857656\n" +
                "321650\n" +
                "202493\n" +
                "546122\n" +
                "133773\n" +
                "651114\n" +
                "558252\n" +
                "544541\n" +
                "461456\n" +
                "550268\n" +
                "555597\n" +
                "696337\n" +
                "299036\n" +
                "304161\n" +
                "587061\n" +
                "119680\n" +
                "288994\n" +
                "162007\n" +
                "641927\n" +
                "559499\n" +
                "124360\n" +
                "349232\n" +
                "244135\n" +
                "565335\n" +
                "288576\n" +
                "834138\n" +
                "213130\n" +
                "875178\n" +
                "519709\n" +
                "876679\n" +
                "895799\n" +
                "899389\n" +
                "569626\n" +
                "899864\n" +
                "923326\n" +
                "928237\n" +
                "928238\n" +
                "933848\n" +
                "933851\n" +
                "934974\n" +
                "874443\n" +
                "936408\n" +
                "927668\n" +
                "939544\n" +
                "536530\n" +
                "955334\n" +
                "955367\n" +
                "611199\n" +
                "554324\n" +
                "942250\n" +
                "968622\n" +
                "969359\n" +
                "969367\n" +
                "970523\n" +
                "970678\n" +
                "971586\n" +
                "972437\n" +
                "977574\n" +
                "977581\n" +
                "977582\n" +
                "980334\n" +
                "980390\n" +
                "984070\n" +
                "984798\n" +
                "984818\n" +
                "985747\n" +
                "102110\n" +
                "105585\n" +
                "106381\n" +
                "106380\n" +
                "106880\n" +
                "107536\n" +
                "112797\n" +
                "112821\n" +
                "125615\n" +
                "128407\n" +
                "130236\n" +
                "130976\n" +
                "133360\n" +
                "133361\n" +
                "134226\n" +
                "137149\n" +
                "137563\n" +
                "137661\n" +
                "138192\n" +
                "138910\n" +
                "140566\n" +
                "141326\n" +
                "142823\n" +
                "142825\n" +
                "143276\n" +
                "143912\n" +
                "144965\n" +
                "145870\n" +
                "145871\n" +
                "146040\n" +
                "150720\n" +
                "150739\n" +
                "182678\n" +
                "182686\n" +
                "182674\n" +
                "183495\n" +
                "184588\n" +
                "184586\n" +
                "184563\n" +
                "184633\n" +
                "185093\n" +
                "185192\n" +
                "185979\n" +
                "186794\n" +
                "187894\n" +
                "189065\n" +
                "192121\n" +
                "192186\n" +
                "193307\n" +
                "193299\n" +
                "193313\n" +
                "193311\n" +
                "194513\n" +
                "197009\n" +
                "197735\n" +
                "197730\n" +
                "198965\n" +
                "206624\n" +
                "206824\n" +
                "207891\n" +
                "207888\n" +
                "207889\n" +
                "207890\n" +
                "208512\n" +
                "208751\n" +
                "208767\n" +
                "209001\n" +
                "210013\n" +
                "210222\n" +
                "210799\n" +
                "217955\n" +
                "218037\n" +
                "220069\n" +
                "223457\n" +
                "223969\n" +
                "223971\n" +
                "224084\n" +
                "226091\n" +
                "226288\n" +
                "227967\n" +
                "238250\n" +
                "247359\n" +
                "318468\n" +
                "373396\n" +
                "393089\n" +
                "393564\n" +
                "402364\n" +
                "586265\n" +
                "743349\n" +
                "745847\n" +
                "747639\n" +
                "751720\n" +
                "757403\n" +
                "760311\n" +
                "651697\n" +
                "743795";
        s.split("\n");
        //100个拆分一次
        int i = 1;
        for (String s1 : s.split("\n")) {
            System.out.print(s1 + ",");
//            if (i % 50 == 0) {
//                System.out.println();
//            }
            i++;
        }
//        System.out.println(eatenApples.eatenApples(apples, days));
    }

    public int eatenApples2(int[] apples, int[] days) {
        //key days value appleNum
        int eatAppleNums = 0;
        int canEatAppleDay = 0;
        for (int i = 0; i < apples.length; i++) {
            int appleNum = apples[i];
            int day = days[i];
            if (appleNum > 0 && day > 0) {
                canEatAppleDay = Math.max(canEatAppleDay, Math.min(appleNum, day));
            }
            if (canEatAppleDay > 0) {
                eatAppleNums++;
                canEatAppleDay--;
            }

        }
        return eatAppleNums + canEatAppleDay;
    }

    public int eatenApples(int[] apples, int[] days) {
        //key days value appleNum
        PriorityQueue<int[]> treeMap = new PriorityQueue<>(new Comparator<int[]>() {
            @Override
            public int compare(int[] o1, int[] o2) {
                return o1[0] - o2[0];
            }
        });
        int eatAppleNums = 0;
        for (int i = 0; i < apples.length; i++) {
            while (!treeMap.isEmpty() && treeMap.peek()[0] <= i) {
                treeMap.poll();
            }
            int currApple = apples[i];
            int currDays = days[i];
            if (currApple > 0 && currDays > 0) {
                treeMap.offer(new int[]{i + currDays, currApple});
            }
            if (!treeMap.isEmpty()) {
                int[] poll = treeMap.peek();
                poll[1]--;
                if (poll[1] == 0) {
                    treeMap.poll();
                }
                eatAppleNums++;
            }
        }
        int nowDay = days.length;
        while (!treeMap.isEmpty()) {
            while (!treeMap.isEmpty() && treeMap.peek()[0] <= nowDay) {
                treeMap.poll();
            }
            if (treeMap.isEmpty()) {
                break;
            }
            int[] poll = treeMap.peek();
            poll[1]--;
            if (poll[1] == 0) {
                treeMap.poll();
            }
            nowDay++;
            eatAppleNums++;
        }
        return eatAppleNums;
    }
}
